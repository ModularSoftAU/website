"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[8186],{220:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>c,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>a,toc:()=>l});var s=t(4848),i=t(8453);const o={title:"Using JSON Simple",sidebar_label:"Using JSON Simple",sidebar_position:1},r=void 0,a={id:"miscellaneous/using_json_simple",title:"Using JSON Simple",description:"The main take away with JSONSimple (and most other Java JSON libraries) is that Objects can be one of three things at all times.",source:"@site/docs/miscellaneous/using_json_simple.md",sourceDirName:"miscellaneous",slug:"/miscellaneous/using_json_simple",permalink:"/docs/miscellaneous/using_json_simple",draft:!1,unlisted:!1,editUrl:"https://github.com/ModularSoftAU/website/tree/main/packages/create-docusaurus/templates/shared/docs/miscellaneous/using_json_simple.md",tags:[],version:"current",sidebarPosition:1,frontMatter:{title:"Using JSON Simple",sidebar_label:"Using JSON Simple",sidebar_position:1},sidebar:"tutorialSidebar",previous:{title:"Form Modules",permalink:"/docs/contributing/zander/formModules"},next:{title:"Installing Datapacks",permalink:"/docs/miscellaneous/installingDatapacks"}},c={},l=[];function d(e){const n={code:"code",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.p,{children:"The main take away with JSONSimple (and most other Java JSON libraries) is that Objects can be one of three things at all times."}),"\n",(0,s.jsxs)(n.p,{children:["It can be a ",(0,s.jsx)(n.code,{children:"JSONObject"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:"{\n    // This format\n}\n"})}),"\n",(0,s.jsxs)(n.p,{children:["A ",(0,s.jsx)(n.code,{children:"JSONArray"}),":"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:"[\n    // This format\n]\n"})}),"\n",(0,s.jsxs)(n.p,{children:["Or an ",(0,s.jsx)(n.code,{children:"Object"}),"."]}),"\n",(0,s.jsxs)(n.p,{children:["All the functions return ",(0,s.jsx)(n.code,{children:"Objects"})," so it is up to the programmer to understand the format of the json and how it is meant to be casted to enable reading the JSON."]}),"\n",(0,s.jsx)(n.p,{children:"If you have some JSON that looks like this:"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-json",children:'{\n    "integer": 5,\n    "double": 0.5,\n    "string": "Hello, World!",\n    "numbers": [1, 2, 3, 4, 5],\n    "nested_content": [\n        {\n            "x": 2,\n            "y": 5\n        },\n        {\n            "x": 7,\n            "y": 8\n        },\n    ]\n}\n'})}),"\n",(0,s.jsxs)(n.p,{children:["...we can begin to deconstruct this into ",(0,s.jsx)(n.code,{children:"JSONObjects"}),", ",(0,s.jsx)(n.code,{children:"JSONArrays"})," and ",(0,s.jsx)(n.code,{children:"Objects"}),". Each of the methods below show how you would parse the json to retrieve the desired values."]}),"\n",(0,s.jsx)(n.p,{children:"Disclaimer: I have not tested this code at all."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-java",children:'import org.json.simple.JSONArray;\nimport org.json.simple.JSONObject;\nimport org.json.simple.parser.JSONParser;\nimport org.json.simple.parser.ParseException;\nimport java.util.List;\n\n\npublic class JsonSimpleExample {\n    private JSONObject jsonObject;\n\n    /**\n     * This is how you first convert a string into a JSONObject.\n     * For our example, let\'s assume they input the JSON from\n     * above.\n     */\n    public JsonSimpleExample(String json) {\n        try {\n            jsonObject = (JSONObject) new JSONParser().parse(json);\n        } catch (ParseException e) {\n            // Is not valid JSON\n        }\n    }\n\n    /**\n     * This returns an Object that we know is an integer so \n     * we can safely cast it. Note that we are casting it to\n     * a long not to an int, because internally this library\n     * reads integers as longs. You can cast it to a int if\n     * you know this won\'t be a problem.\n     */\n    public long getInteger() {\n        return (long)jsonObject.get("integer");\n    }\n\n    /**\n     * This returns an Object that we know is a double so \n     * we can safely cast it.\n     */\n    public double getDouble() {\n        return (double)jsonObject.get("double");\n    }\n\n    /**\n     * This returns an Object that we know is a String so \n     * we can safely cast it.\n     */\n    public String getString() {\n        return (String)jsonObject.get("string");\n    }\n\n    public List<Long> getNumbers() {\n        List<Long> numbers = new ArrayList<>();\n        JSONArray array = (JSONArray)jsonObject.get("numbers");\n        for (int i = 0; i < array.size(); i++) {\n            // Again, notice how we jump straight to casting the\n            // Object returned by get to a Long because we know\n            // it\'s an integer.\n            Long number = (Long)array.get(i);\n            numbers.add(number);\n        }\n        return numbers;\n    }\n\n    /**\n     * This is a more complicated example to show how you can combine\n     * the concepts above to read any JSON.\n     */\n    public void getNestedContent() {\n        JSONArray nestedContent = (JSONArray)jsonObject.get("nested_content");\n        for (int i = 0; i < nested_content.size(); i++) {\n            // Here we are casting the Object to a JSONObject, because\n            // it is still of the form {}. Therefore it is a JSONObject\n            // still and must be casted to that.\n            JSONObject innerJsonObject = (JSONObject)nested_content.get(i);\n\n            // And now that you\'ve extracted this data, you might opt\n            // to store it inside a class or another data structure.\n            // For this example I\'ve just left it here.\n            long x = (long)innerJsonObject.get("x");\n            long y = (long)innerJsonObject.get("x");\n        }\n    }\n}\n'})})]})}function u(e={}){const{wrapper:n}={...(0,i.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,n,t)=>{t.d(n,{R:()=>r,x:()=>a});var s=t(6540);const i={},o=s.createContext(i);function r(e){const n=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function a(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:r(e.components),s.createElement(o.Provider,{value:n},e.children)}}}]);